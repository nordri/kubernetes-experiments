worker = "worker-${UUID.randomUUID().toString()}"

podTemplate(label: worker, containers: [
    containerTemplate(name: 'build-tools', image: 'maven:3.5.2-jdk-8', command: 'cat', ttyEnabled: true),
    containerTemplate(name: 'docker', image: 'docker', command: 'cat', ttyEnabled: true),
    containerTemplate(name: 'mysql', image: 'mysql:5.7', ttyEnabled: true, envVars: [
      envVar(key: 'MYSQL_ROOT_PASSWORD', value: 'r00t'),
      envVar(key: 'MYSQL_DATABASE', value: 'springboot_mysql_example')],
      ports: [portMapping(name: 'mysql', containerPort: 3306, hostPort: 3306)]),
    containerTemplate(name: 'java', image: 'openjdk:8-jre', command: 'cat', ttyEnabled: true, 
      ports: [portMapping(name: 'springboot', containerPort: 8080, hostPort: 8080)])
    ],
    volumes: [
      hostPathVolume(mountPath: '/var/run/docker.sock', hostPath: '/var/run/docker.sock'),
      hostPathVolume(mountPath: '/root/.m2', hostPath: '/tmp/jenkins/m2')
    ]) {
  
    node(worker) {
      stage('Cloning the repo...') {
        sh 'rm -rf spring-boot-mysql-example || true'
        sh 'git clone https://github.com/codeurjc/spring-boot-mysql-example'
      }
      
      stage('Installing...') {
        container('build-tools') {
          sh 'cd spring-boot-mysql-example && mvn -DskipTests=true install'
        }
      }

      stage('Building...') {
        container('build-tools') {
          sh 'cd spring-boot-mysql-example && mvn -DskipTests=true clean package'
        }
      }

      def gitCommit = sh(returnStdout: true, script: "cd spring-boot-mysql-example && git log -n 1 --pretty=format:'%h'").trim()
      
      stage('Create Docker images') {
        container('docker') {
          sh """
            cd spring-boot-mysql-example 
            docker build -t nordri/spring-boot-example:${gitCommit} .
          """
        }
      }
      
      stage('Testing') {
        container('java') {
          sh """
            cp /home/jenkins/workspace/pipeline2/spring-boot-mysql-example/target/*.jar ./app.jar
            java -jar -Dspring.datasource.url=jdbc:mysql://127.0.0.1:3306/springboot_mysql_example ./app.jar &
            """
          RES = sh (
            script: 'sleep 30 && curl --location --output /dev/null --silent --write-out "%{http_code}\\n" 127.0.0.1:8080',
            returnStdout: true
          ).trim()
          if (RES != '200') {
            sh 'exit 1'
          }
        }
      }

      stage('Uploading Docker images') {
        container('docker') {
          withCredentials([[$class: 'UsernamePasswordMultiBinding',
            credentialsId: 'DockerHub',
            usernameVariable: 'DOCKER_HUB_USER',
            passwordVariable: 'DOCKER_HUB_PASSWORD']]) {
            sh """
              cd spring-boot-mysql-example 
              docker login -u ${DOCKER_HUB_USER} -p ${DOCKER_HUB_PASSWORD}
              docker push nordri/spring-boot-example:${gitCommit} 
              """
          }
        }
      }
    }
  }

    